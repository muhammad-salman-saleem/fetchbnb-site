generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                              String             @id @default(cuid())
  name                            String?
  email                           String?            @unique
  password                        String?
  emailVerified                   DateTime?
  image                           String?
  passwordUpdateCode              String?            @unique
  accounts                        Account[]
  sessions                        Session[]
  plan                            Plan               @default(UNPAID)
  joinDate                        DateTime           @default(now())
  customerId                      String?            @db.Text
  payment                         UserPayment?
  role                            Role               @default(USER)
  customerProfile                 CustomerProfile?
  requestedZonings                RequestedZoning[]
  phone                           String?
  zip                             String?
  gender                          Gender?
  investmentDescription           String?
  airbnbProfileLink               String?
  didReceiveAbandonedNotification Boolean            @default(false)
  propertyLocations               PropertyLocation[]
  communityOrdInfos               communityOrdInfo[]
}

model Coach {
  id                String        @id @default(cuid())
  city              String
  stateCode         String
  bio               String        @db.Text
  name              String
  stripeLinkThirty  String?
  stripeLinkHour    String?
  description       String        @db.Text
  thirtySession     Float?
  hourSession       Float?
  airbnbProfileLink String?       @db.Text
  reviews           CoachReview[]
  images            CoachImage[]
  tags              CoachTag[]
}

model CoachTag {
  id      String      @id @default(cuid())
  tag     CoachingTag
  Coach   Coach?      @relation(fields: [coachId], references: [id])
  coachId String?
}

model CoachImage {
  id      String  @id @default(cuid())
  url     String  @db.Text
  Coach   Coach?  @relation(fields: [coachId], references: [id])
  coachId String?
}

model CoachReview {
  id      String  @id @default(cuid())
  name    String?
  message String? @db.Text
  rating  Int     @default(4)
  Coach   Coach?  @relation(fields: [coachId], references: [id])
  coachId String?
}

model PropertyLocation {
  id       String @id @default(cuid())
  location String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DemoUser {
  id     String   @id @default(cuid())
  ip     String   @unique
  token  String?  @unique
  joined DateTime @default(now())
  uses   Int      @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPayment {
  id                   String  @id @default(cuid())
  userId               String  @unique
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentId            String?
  billing_cycle_anchor Int?
  created              Int?
  current_period_end   Int?
  current_period_start Int?
  customerId           String? @unique
  clientSecret         String?
  priceId              String?
}

model CustomerProfile {
  id        String  @id @default(cuid())
  userId    String? @unique
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String  @unique
}

model RequestedZoning {
  id     String @id @default(cuid())
  state  String
  county String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model communityOrdInfo {
  id     String @id @default(cuid())
  state  String
  county String
  info   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailUser {
  id    String @id @default(cuid())
  email String
}

model MashvisorResponse {
  id              String           @id @default(cuid())
  propertyId      String           @unique
  mashvisorStatus MashvisorStatus?
}

model MashvisorStatus {
  id                  String            @id @default(cuid())
  mashvisorResponseId String            @unique
  mashvisorResponse   MashvisorResponse @relation(fields: [mashvisorResponseId], references: [id], onDelete: Cascade)
  status              String
  mashvisorContent    MashvisorContent?
}

model MashvisorContent {
  id                      String                @id @default(cuid())
  mashvisorStatusId       String                @unique
  mashvisorStatus         MashvisorStatus       @relation(fields: [mashvisorStatusId], references: [id], onDelete: Cascade)
  median_home_value       Float?
  sample_size             Float?
  median_occupancy_rate   Float?
  median_rental_income    Float?
  median_night_rate       Float?
  adjusted_rental_income  Float?
  price_to_rent_ratio     Float?
  cash_flow               Float?
  cash_on_cash            Float?
  cap_rate                Float?
  expenses                Float?
  tax_rate                Float?
  market                  Float?
  principle_with_interest Float?
  expenses_map            MashvisorExpensesMap?
}

model MashvisorExpensesMap {
  id                 String           @id @default(cuid())
  mashvisorContentId String           @unique
  mashvisorContent   MashvisorContent @relation(fields: [mashvisorContentId], references: [id], onDelete: Cascade)
  propertyTax        Float?
  maintenace         Float?
  management         Float?
  rentalIncomeTax    Float?
  insurance          Float?
  utilities          Float?
  hoa_dues           Float?
  cleaningFees       Float?
}

enum Plan {
  UNPAID
  ZONING
  RENTAL
  BUYING
  BOTH
}

enum Role {
  ADMIN
  USER
  COACH
}

enum Gender {
  MALE
  FEMALE
}

enum CoachingTag {
  GLAMPING
  MIDTERMRENTALS
  NEWCONSTRUCTION
  ARBITRAGESUBLEASING
  INTERNATIONAL
}
